generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admins {
  id             BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  name           String
  email          String       @unique(map: "admins_email_unique")
  password       String
  role           admins_role?
  teacher_id     BigInt?      @db.UnsignedBigInt
  remember_token String?      @db.VarChar(100)
  created_at     DateTime?    @db.Timestamp(0)
  updated_at     DateTime?    @db.Timestamp(0)

  @@index([teacher_id], map: "admins_teacher_id_foreign")
}

model alerts {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title       String?   @db.VarChar(255)
  description String?   @db.Text
  image       String?   @db.VarChar(255)
  video       String?   @db.VarChar(255)
  mime_type   String?   @db.VarChar(255)
  teacher_id  BigInt    @db.UnsignedBigInt
  active      Int       @default(1)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
}

model attendances {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  user_id    BigInt    @db.UnsignedBigInt
  session_id BigInt    @db.UnsignedBigInt
  video_id   BigInt    @db.UnsignedBigInt
  price      Decimal   @db.Decimal(8, 2)
}

model categories {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model centers {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String
  image_name String    @default("avatar.png")
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model codes {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  code       BigInt    @db.UnsignedBigInt
  video_id   BigInt    @db.UnsignedBigInt
  active_for Int
  is_used    Boolean   @default(false)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model exams {
  id            BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  name          String
  status        Int             @default(0)
  time          Int             @default(15)
  image_name    String          @default("avatar.png")
  segment       String?         @db.LongText
  teacher_id    BigInt          @db.UnsignedBigInt
  category_id   BigInt          @db.UnsignedBigInt
  show_mistakes Int             @default(0)
  videoId       Int?
  no_questions  Int             @default(10)
  grade         Int
  is_month      Int             @default(0)
  randomOrder   Int             @default(1)
  direction     exams_direction
  created_at    DateTime?       @db.Timestamp(0)
  updated_at    DateTime?       @db.Timestamp(0)

  @@index([category_id], map: "exams_category_id_foreign")
  @@index([teacher_id], map: "exams_teacher_id_foreign")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model groups {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  students_id String   @db.LongText
  teacher_id  Int
  category_id Int
  updated_at  DateTime @default(now()) @db.Timestamp(0)
  created_at  DateTime @default(dbgenerated("('0000-00-00 00:00:00')")) @db.Timestamp(0)
}

model homework {
  id                  BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  title               String?
  description         String?               @db.VarChar(1000)
  teacher_id          BigInt                @db.UnsignedBigInt
  video_id            BigInt                @db.UnsignedBigInt
  created_at          DateTime?             @db.Timestamp(0)
  updated_at          DateTime?             @db.Timestamp(0)
  homeworkquestions   homeworkquestions[]
  user_homework       user_homework[]
  userhomeworkanswers userhomeworkanswers[]
}

model homeworkquestions {
  id                  BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  body                String?
  type                String?
  option_1            String?
  option_2            String?
  option_3            String?
  option_4            String?
  correct_answer      String?
  homework_id         BigInt                @db.UnsignedBigInt
  created_at          DateTime?             @db.Timestamp(0)
  updated_at          DateTime?             @db.Timestamp(0)
  homework            homework              @relation(fields: [homework_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "homeworkquestions_homework_id_foreign")
  userhomeworkanswers userhomeworkanswers[]

  @@index([homework_id], map: "homeworkquestions_homework_id_foreign")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String
  batch     Int
}

model moderator_teacher {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  moderator_id BigInt?   @db.UnsignedBigInt
  teacher_id   BigInt?   @db.UnsignedBigInt
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
}

model options {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  answer      String
  point       Int       @default(0)
  image       String?   @db.VarChar(255)
  question_id BigInt    @db.UnsignedBigInt
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)

  @@index([question_id], map: "options_question_id_foreign")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model password_resets {
  email      String
  token      String
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
  @@ignore
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model questions {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  question   String    @db.Text
  image      String?   @db.VarChar(255)
  exam_id    BigInt    @db.UnsignedBigInt
  is_label   Int       @default(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@index([exam_id], map: "questions_exam_id_foreign")
}

model reports {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  content    String
  user_agent String
  user_id    BigInt?   @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model results {
  id         BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  total      Int
  user_id    BigInt         @db.UnsignedBigInt
  exam_id    BigInt         @db.UnsignedBigInt
  status     results_status @default(pending)
  questions  String?        @db.Text
  points     String?        @db.Text
  teacher_id BigInt         @db.UnsignedBigInt
  created_at DateTime?      @db.Timestamp(0)
  updated_at DateTime?      @db.Timestamp(0)

  @@index([exam_id], map: "results_exam_id_foreign")
  @@index([teacher_id], map: "results_teacher_id_foreign")
  @@index([user_id], map: "results_user_id_foreign")
}

model session_user {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  session_id BigInt    @db.UnsignedBigInt
  user_id    BigInt    @db.UnsignedBigInt
  price      Decimal   @db.Decimal(8, 2)
}

model sessions {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  category_id BigInt    @db.UnsignedBigInt
  day         String
  start       DateTime  @db.Time(0)
  duration    Int?
  ends        DateTime? @db.Time(0)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
}

model subscribes {
  id          BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  status      subscribes_status @default(appending)
  user_id     BigInt            @db.UnsignedBigInt
  category_id BigInt            @db.UnsignedBigInt
  teacher_id  BigInt            @db.UnsignedBigInt
  expired     DateTime          @default(now()) @db.Timestamp(0)
  videos_id   String?           @db.LongText
  created_at  DateTime?         @db.Timestamp(0)
  updated_at  DateTime?         @db.Timestamp(0)

  @@index([category_id], map: "subscribes_category_id_foreign")
  @@index([teacher_id], map: "subscribes_teacher_id_foreign")
  @@index([user_id], map: "subscribes_user_id_foreign")
}

model teacher_category {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  teacher_id  BigInt    @db.UnsignedBigInt
  category_id BigInt    @db.UnsignedBigInt
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)

  @@index([category_id], map: "teacher_category_category_id_foreign")
  @@index([teacher_id], map: "teacher_category_teacher_id_foreign")
}

model teachers {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String
  image_name String    @default("avatar.png")
  phone      Int?
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  center_id  BigInt?   @db.UnsignedBigInt
}

model user_code_subscriptions {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt    @db.UnsignedBigInt
  code_id    BigInt    @db.UnsignedBigInt
  video_id   BigInt    @db.UnsignedBigInt
  expired    DateTime  @default(now()) @db.Timestamp(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  start_date DateTime  @default(now()) @db.Timestamp(0)
}

model user_homework {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id     BigInt    @db.UnsignedBigInt
  homework_id BigInt    @db.UnsignedBigInt
  validated   Boolean   @default(false)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  homework    homework  @relation(fields: [homework_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_homework_homework_id_foreign")

  @@unique([user_id, homework_id], map: "user_homework_user_id_homework_id_unique")
  @@index([homework_id], map: "user_homework_homework_id_foreign")
}

model userhomeworkanswers {
  id                     BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  question_id            BigInt            @db.UnsignedBigInt
  user_id                BigInt            @db.UnsignedBigInt
  homework_id            BigInt            @db.UnsignedBigInt
  answer                 String?
  answerValidationStatus String?
  correctAnswer          String?           @db.VarChar(1000)
  created_at             DateTime?         @db.Timestamp(0)
  updated_at             DateTime?         @db.Timestamp(0)
  homework               homework          @relation(fields: [homework_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "userhomeworkanswers_homework_id_foreign")
  homeworkquestions      homeworkquestions @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "userhomeworkanswers_question_id_foreign")

  @@unique([user_id, homework_id, question_id], map: "userhomeworkanswers_user_id_homework_id_question_id_unique")
  @@index([homework_id], map: "userhomeworkanswers_homework_id_foreign")
  @@index([question_id], map: "userhomeworkanswers_question_id_foreign")
}

model users {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  username          String
  email             String    @unique(map: "users_email_unique")
  email_verified_at DateTime? @db.Timestamp(0)
  password          String
  phone             Int
  image_name        String    @default("avatar.png")
  login_counter     Int       @default(0)
  blocked           Int       @default(0)
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
  card_unique_key   BigInt?
}

model video_parts {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title      String
  image_name String    @default("avatar.png")
  video_id   BigInt    @db.UnsignedBigInt
  url        String    @db.Text
  url_2      String?   @db.Text
  url_3      String?   @db.Text
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model videos {
  id               BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title            String
  image_name       String    @default("avatar.png")
  details          String?   @db.Text
  teacher_id       BigInt    @db.UnsignedBigInt
  category_id      BigInt    @db.UnsignedBigInt
  url              String    @db.Text
  url_2            String?   @db.Text
  url_3            String?   @db.Text
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
  required_exam_id BigInt?   @db.UnsignedBigInt
  activation_count BigInt    @default(0) @db.UnsignedBigInt
  deleted_at       DateTime? @db.Timestamp(0)

  @@index([category_id], map: "videos_category_id_foreign")
  @@index([teacher_id], map: "videos_teacher_id_foreign")
}

enum subscribes_status {
  active
  deactivate
  appending
}

enum admins_role {
  Admin
  Assistant
  Moderator
}

enum results_status {
  completed
  pending
}

enum exams_direction {
  left
  right
}
